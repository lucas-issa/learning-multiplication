{"version":3,"sources":["i18next.ts","multiplication/Stats.tsx","multiplication/Multiplication.tsx","ChangeLanguage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["i18n","use","LanguageDetector","initReactI18next","init","resources","translation","fallbackLng","interpolation","escapeValue","Stats","props","stats","type","hits","hitsLate","hitsTooLate","misses","skips","reveals","speed","className","toFixed","MultiplicationComponent","state","message","messageClassName","factor1","factor2","result","resultTry","temp","global","seconds","timer","secondsLate","secondsTooLate","toComeBack","Map","comeBackControl","count","lastWrong","input","generateToComeBackKey","startTimer","setInterval","setState","stopTimer","clearInterval","undefined","isWindowVisible","document","visibilityState","stopTimerOnHide","addEventListener","loadOperation","window","localStorage","setItem","JSON","stringify","lastState","parse","getItem","focus","randomFactors","incrementToComeBack","wrongAnswer","key","item","get","set","decrementToComeBack","delete","mesgTimeout","randomFactor","Math","round","random","randomBothFactors","decideComeBack","size","maxCount","useComeBack","console","log","toComeBackList","values","i","length","comeBackItem","newFactors","onChange","e","valueTxt","target","value","Number","go","t","emitMessage","incrementStat","NaN","onSubmit","preventDefault","reset","save","reveal","toString","skip","loadStats","toComeBackObj","Object","keys","forEach","toComeBackToSave","entries","entry","getTimerClass","getPracticeList","map","sort","a","b","comp","localeCompare","showPracticeResults","showPracticeResultsTimer","revealAll","clearTimeout","setTimeout","this","wordsCount","split","getTimeToShowMessage","stat","totalHits","newSpeed","shouldRecalculeteSpeed","speedKey","calculeteNewSpeedAverage","blur","practiceList","totalRamainingNoFastHit","reduce","previousValue","currentValue","maxLength","max","min","ref","onClick","React","Component","Multiplication","compose","withTranslation","ChangeLanguage","language","event","changeLanguage","App","useTranslation","href","rel","height","viewBox","version","width","aria-hidden","d","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e2829fe9.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport {initReactI18next} from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n\n    .use(LanguageDetector)\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .init({\n        resources: {\n            'en': {\n                translation: {\n                    \"App title\": \"Learning multiplication\",\n                    \"Go\": \"Go\",\n                    \"Reset\": \"Reset\",\n                    \"Next\": \"Next\",\n                    \"Reveal\": \"Reveal\",\n                    \"Reveal all\": \"Reveal all\",\n                    \"Global\": \"Global\",\n                    \"Until reset\": \"Until reset\",\n                    \"Type a number\": \"Type a number\",\n                    \"Try again\": \"Try again\",\n                    \"Congratulations!!!\": \"Congratulations!!!\",\n                    \"Congratulations! You can be faster!\": \"Congratulations! You can be faster!\",\n                    \"Right but slow\": \"Right but slow\",\n                    \"To study\": \"To study\",\n                    \"items\": \"items\",\n                    \"Total negative points\": \"Total negative points\",\n                    \"negative points\": \"negative points\",\n                }\n            },\n            'pt-BR': {\n                translation: {\n                    \"App title\": \"Aprendendo multiplicação\",\n                    \"Go\": \"Ir\",\n                    \"Reset\": \"Limpar\",\n                    \"Next\": \"Próximo\",\n                    \"Reveal\": \"Revelar\",\n                    \"Reveal all\": \"Revelar todos\",\n                    \"Global\": \"Global\",\n                    \"Until reset\": \"Até limpar\",\n                    \"Type a number\": \"Digite um número\",\n                    \"Try again\": \"Tente novamente\",\n                    \"Congratulations!!!\": \"Parabéns!!!\",\n                    \"Congratulations! You can be faster!\": \"Parabéns! Você pode ser mais rápido!\",\n                    \"Right but slow\": \"Certo, mas lento\",\n                    \"To study\": \"A estudar\",\n                    \"items\": \"itens\",\n                    \"Total negative points\": \"Total de pontos negativos\",\n                    \"negative points\": \"pontos negativos\",\n                }\n            },\n        },\n        // lng: \"en\",\n        fallbackLng: \"en\",\n\n        interpolation: {\n            escapeValue: false\n        }\n    });\n","import React from 'react';\n\nexport interface StatsInfo {\n    hits: number;\n    hitsLate: number;\n    hitsTooLate: number;\n    misses: number;\n    skips: number;\n    reveals: number;\n    speed: number; // operations / minute\n}\n\nexport function initStatsInfo(): StatsInfo {\n    return {\n        hits: 0,\n        hitsLate: 0,\n        hitsTooLate: 0,\n        misses: 0,\n        skips: 0,\n        reveals: 0,\n        speed: 0,\n    };\n}\n\ninterface StatsProps {\n    stats: StatsInfo,\n        type: string,\n}\n\nconst StatsComponent = (props: StatsProps) => {\n    const {stats, type} = props;\n    const {\n        hits, hitsLate, hitsTooLate, misses, skips, reveals, speed\n    } = stats;\n    return (\n        <div className=\"stats\">\n            <div className=\"stats-type\">\n                {type}\n            </div>\n            <div>\n              <span className=\"hits stats-item\">\n                  {hits}\n              </span>\n                {hitsLate > 0 &&\n                <span className=\"hits-late stats-item\">\n                        {hitsLate}\n                    </span>\n                }\n                {hitsTooLate > 0 &&\n                <span className=\"hits-too-late stats-item\">\n                        {hitsTooLate}\n                    </span>\n                }\n                {skips > 0 &&\n                <span className=\"skips stats-item\">\n                        {skips}\n                    </span>\n                }\n                {reveals > 0 &&\n                <span className=\"reveals stats-item\">\n                        {reveals}\n                    </span>\n                }\n                {misses > 0 &&\n                <span className=\"misses stats-item\">\n                        {misses}\n                    </span>\n                }\n                {speed > 0 &&\n                <span className=\"speed stats-item\">\n                    <small>{speed.toFixed(0)}<small>/min.</small></small>\n                    </span>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport const Stats = StatsComponent;\n","import React from 'react';\nimport compose from 'lodash/flowRight';\nimport './Multiplication.scss';\nimport {WithTranslation, withTranslation} from 'react-i18next';\nimport {initStatsInfo, StatsInfo, Stats} from './Stats';\n\ninterface ToComeBackType {\n    factor1: number;\n    factor2: number;\n    result: number;\n    count: number;\n}\n\nclass MultiplicationComponent extends React.Component<WithTranslation> {\n\n    state: {\n        message: string,\n        messageClassName: string,\n\n        factor1: number,\n        factor2: number,\n        result: number,\n        resultTry: string | number,\n\n        stats: {\n            temp: StatsInfo,\n            global: StatsInfo,\n        },\n\n        seconds: number,\n    } = {\n        message: '',\n        messageClassName: '',\n\n        factor1: null,\n        factor2: null,\n        result: null,\n        resultTry: '',\n\n        stats: {\n            temp: initStatsInfo(),\n            global: initStatsInfo(),\n        },\n\n        seconds: 0,\n    };\n\n    timer;\n\n    secondsLate = 10;\n    secondsTooLate = 18;\n\n    /**\n     * Operations that need more training and therefore will appear more frequently.\n     */\n    toComeBack: Map<string, ToComeBackType> = new Map();\n\n    comeBackControl = {\n        count: 0,\n    };\n\n    lastWrong: string;\n\n    input: HTMLElement;\n\n    componentDidMount() {\n        this.loadStats();\n        this.loadOperation();\n        if (this.isWindowVisible()) {\n            this.startTimer();\n        }\n        this.stopTimerOnHide();\n\n        setTimeout(() => {\n            this.input.focus();\n        }, 250);\n    }\n\n    componentWillUnmount() {\n        this.stopTimer();\n    }\n\n    generateToComeBackKey = (factor1: number, factor2: number) => {\n        return `${factor1}x${factor2}`;\n    }\n\n    startTimer = () => {\n        if (!this.timer) {\n            this.timer = setInterval(() => {\n                this.setState({ seconds: this.state.seconds + 1 });\n            }, 1000);\n        }\n    };\n\n    stopTimer = () => {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = undefined;\n        }\n    };\n\n    isWindowVisible = () => {\n        return document.visibilityState === 'visible';\n    };\n\n    stopTimerOnHide = () => {\n        document.addEventListener(\"visibilitychange\", () => {\n            if (this.isWindowVisible()) {\n                this.startTimer();\n            } else {\n                this.stopTimer();\n            }\n        });\n    };\n\n    loadOperation = () => {\n        const lastStateKey = 'lastState';\n\n        window.addEventListener('unload', () => {\n            localStorage.setItem(lastStateKey, JSON.stringify({\n                seconds: this.state.seconds,\n                factor1: this.state.factor1,\n                factor2: this.state.factor2,\n                result: this.state.result,\n            }));\n        });\n\n        const lastState = JSON.parse(localStorage.getItem(lastStateKey));\n\n        if (lastState && lastState.seconds) {\n            this.setState({\n                seconds: lastState.seconds + 1,\n            });\n        }\n\n        if (lastState && lastState.factor1 && lastState.factor2 && lastState.result) {\n            this.setState({\n                factor1: lastState.factor1,\n                factor2: lastState.factor2,\n                result: lastState.result,\n            });\n            this.focus();\n        } else {\n            this.randomFactors();\n        }\n    };\n\n    incrementToComeBack = (wrongAnswer = false) => {\n        const {factor1, factor2, result} = this.state;\n        const key = this.generateToComeBackKey(factor1, factor2);\n        let item = this.toComeBack.get(key);\n        if (!item) {\n            item = {\n                factor1,\n                factor2,\n                result,\n                count: 0,\n            };\n            this.toComeBack.set(key, item);\n        }\n        item.count++;\n\n        if (wrongAnswer) {\n            this.lastWrong = key;\n        }\n    };\n\n    decrementToComeBack = (factor1: number, factor2: number) => {\n        const key = this.generateToComeBackKey(factor1, factor2);\n\n        // If you just made a mistake, don't decrease it now.\n        if (key !== this.lastWrong) {\n            const item = this.toComeBack.get(key);\n            if (item) {\n                item.count--;\n                if (item.count <= 0) {\n                    this.toComeBack.delete(key);\n                }\n            }\n        }\n    };\n\n    getTimeToShowMessage(message: string | number) {\n        if (typeof message === 'number') {\n            const time = 3000;\n            // console.log('number', time);\n            return time;\n        } else {\n            const wordsCount = message.split(' ').length;\n            const charactersCount = message.length;\n            const time = 400 + (charactersCount * 50) + (wordsCount * 200);\n            // console.log(wordsCount, charactersCount, time);\n            return time;\n        }\n    }\n\n    mesgTimeout;\n    emitMessage(message: string, className = '') {\n        if (this.mesgTimeout) {\n            clearTimeout(this.mesgTimeout);\n            this.mesgTimeout = null;\n        }\n        this.setState({ message, messageClassName: className });\n        this.mesgTimeout = setTimeout(() => {\n            this.setState({ message: '', messageClassName: '' });\n        }, this.getTimeToShowMessage(message));\n    }\n\n    randomFactor = () => {\n        return Math.round(Math.random() * 10);\n    }\n\n    randomBothFactors = () => {\n        const factor1 = Math.round(Math.random() * 10);\n        const factor2 = Math.round(Math.random() * 10);\n        if (factor1 === this.state.factor1 && factor2 === this.state.factor2) {\n            return this.randomBothFactors();\n        }\n        return {factor1, factor2};\n    }\n\n    decideComeBack = () => {\n        if (this.toComeBack.size === 0) {\n            return false;\n        }\n\n        let maxCount;\n        if (this.toComeBack.size >= 12) {\n            maxCount = 2;\n        } else if (this.toComeBack.size >= 6) {\n            maxCount = 4;\n        } else {\n            maxCount = 6;\n        }\n        return this.comeBackControl.count >= maxCount;\n    }\n\n    randomFactors = () => {\n        this.comeBackControl.count++;\n\n        let useComeBack = false;\n        if (this.decideComeBack()) {\n            console.log(`useComeBack, count: ${this.comeBackControl.count}, size: ${this.toComeBack.size}`);\n            this.comeBackControl.count = 0;\n            useComeBack = true;\n        }\n\n        let factor1;\n        let factor2;\n        let result;\n        const resultTry = '';\n        const seconds = 0;\n\n        if (useComeBack) {\n            // @ts-ignore\n            const toComeBackList = [...this.toComeBack.values()];\n            const i = Math.round(Math.random() * (toComeBackList.length - 1));\n            // console.log('useComeBack', i, toComeBackList);\n            console.log(`useComeBack, i: ${i}`);\n            const comeBackItem = toComeBackList[i];\n            if (this.state.factor1 === comeBackItem.factor1 && this.state.factor2 === comeBackItem.factor2) {\n                // Do not repeat immediately.\n                useComeBack = false;\n            } else {\n                factor1 = comeBackItem.factor1;\n                factor2 = comeBackItem.factor2;\n                result = comeBackItem.result;\n                // console.log('useComeBack', this.generateToComeBackKey(factor1, factor2));\n            }\n        }\n\n        if (!useComeBack) {\n            const newFactors = this.randomBothFactors();\n            factor1 = newFactors.factor1;\n            factor2 = newFactors.factor2;\n            result = factor1 * factor2;\n        }\n\n        this.setState({\n            factor1,\n            factor2,\n            result,\n            resultTry,\n            seconds,\n        });\n        this.focus();\n    }\n\n    onChange = (e) => {\n        const valueTxt = e.target.value;\n        const value = valueTxt === '' ? '' : Number(valueTxt);\n        this.setState({\n            resultTry: value,\n        });\n    }\n\n    go = () => {\n        const {t} = this.props;\n        const {result, resultTry, seconds} = this.state;\n        if (result === resultTry) {\n            if (seconds >= this.secondsTooLate) {\n                this.emitMessage(t('Right but slow'), 'success-too-late');\n                this.incrementToComeBack();\n                this.incrementStat('hitsTooLate', true);\n            } else if (seconds >= this.secondsLate) {\n                this.emitMessage(t('Congratulations! You can be faster!'), 'success-late');\n                this.incrementToComeBack();\n                this.incrementStat('hitsLate', true);\n            } else {\n                this.emitMessage(t('Congratulations!!!'), 'success');\n                const {factor1, factor2} = this.state;\n                this.decrementToComeBack(factor1, factor2);\n                this.incrementStat('hits', true);\n            }\n            this.randomFactors();\n            if (this.lastWrong) {\n                this.lastWrong = undefined;\n            }\n        } else {\n            if (resultTry === '' || resultTry === Number.NaN) {\n                this.emitMessage(`${t('Type a number')}...`, 'failure');\n            } else if (resultTry > 100) {\n                this.emitMessage('Type a number smaller than 100...', 'failure');\n            } else if (resultTry < 0) {\n                this.emitMessage('Type a positive number...', 'failure');\n            } else if (Math.round(resultTry as number) !== resultTry) {\n                this.emitMessage('Type a rounded number...', 'failure');\n            } else {\n                this.emitMessage(`${t('Try again')}...`, 'failure');\n                this.incrementToComeBack(true);\n                this.incrementStat('misses');\n            }\n            this.focus();\n        }\n    }\n\n    calculeteNewSpeedAverage(stat: StatsInfo, seconds: number) {\n        const totalHits = stat.hits + stat.hitsLate + stat.hitsTooLate;\n        const {speed} = stat;\n        let newSpeed = seconds === 0 ? 90.0 : 60.0 / seconds;\n        if (!speed || totalHits === 1) {\n            return newSpeed;\n        } else {\n            return ((stat.speed / totalHits) * (totalHits - 1)) + (newSpeed / totalHits);\n        }\n    }\n\n    incrementStat(type: string, shouldRecalculeteSpeed = false) {\n        const temp = {...this.state.stats.temp};\n        const global = {...this.state.stats.global};\n        temp[type] = temp[type] + 1;\n        global[type] = global[type] + 1;\n        if (shouldRecalculeteSpeed) {\n            const speedKey = 'speed';\n            const {seconds} = this.state;\n            temp[speedKey] = this.calculeteNewSpeedAverage(temp, seconds);\n            global[speedKey] = this.calculeteNewSpeedAverage(global, seconds);\n        }\n        this.setState({\n            stats: {\n                temp: temp,\n                global: global,\n            },\n        }, this.save);\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.go();\n    }\n\n    reset = () => {\n        this.randomFactors();\n        this.setState({\n            stats: {\n                temp: initStatsInfo(),\n                global: this.state.stats.global,\n            },\n        }, this.save)\n    }\n\n    reveal = () => {\n        this.emitMessage(this.state.result.toString(10));\n        this.incrementToComeBack();\n        this.incrementStat('reveals');\n        this.focus();\n    }\n\n    skip = () => {\n        this.incrementToComeBack();\n        this.randomFactors();\n        this.incrementStat('skips');\n    }\n\n    loadStats = () => {\n        // localStorage.setItem('stats', null);\n        // localStorage.setItem('toComeBack', null);\n        const stats = JSON.parse(localStorage.getItem('stats'));\n        if (stats && stats.global) {\n            this.setState({stats});\n        }\n        const toComeBackObj = JSON.parse(localStorage.getItem('toComeBack'));\n        if (toComeBackObj && toComeBackObj.toComeBack) {\n            Object.keys(toComeBackObj.toComeBack).forEach(key => {\n                this.toComeBack.set(key, toComeBackObj.toComeBack[key]);\n            });\n        }\n        // console.log(this.toComeBack);\n    };\n\n    focus() {\n        // É necessário fazer o blur antes para no celular sempre exibir o teclado.\n        this.input.blur();\n        this.input.focus();\n    }\n\n    save = () => {\n        localStorage.setItem('stats', JSON.stringify(this.state.stats));\n\n        const toComeBackToSave = {};\n        // @ts-ignore\n        for (let entry of this.toComeBack.entries()) {\n            toComeBackToSave[entry[0]] = entry[1];\n        }\n        localStorage.setItem('toComeBack', JSON.stringify({toComeBack: toComeBackToSave}));\n    }\n\n    getTimerClass = (seconds: number) => {\n        if (seconds >= this.secondsTooLate) {\n            return 'timer-critical';\n        } else if (seconds >= this.secondsLate) {\n            return 'timer-warn';\n        } else {\n            return 'timer-ok';\n        }\n    }\n\n    getPracticeList: () => {\n        key: string,\n        result: number,\n        count: number,\n    }[] = () => {\n        // @ts-ignore\n        return [...this.toComeBack.entries()]\n            .map(entry => ({\n                key: entry[0],\n                ...entry[1],\n            }))\n            .sort((a, b) => {\n                let comp = b.count - a.count;\n                if (comp === 0) {\n                    comp = a.key.localeCompare(b.key);\n                }\n                return comp;\n            });\n    }\n\n\n    showPracticeResults = false;\n    showPracticeResultsTimer;\n\n    revealAll = () => {\n        if (this.showPracticeResultsTimer) {\n            clearTimeout(this.showPracticeResultsTimer);\n            this.showPracticeResultsTimer = null;\n        }\n        this.showPracticeResults = true;\n        setTimeout(() => {\n            this.showPracticeResults = false;\n        }, 2500 * this.toComeBack.size);\n    }\n\n    render() {\n        const {t} = this.props;\n        const {\n            message, messageClassName,\n            factor1, factor2, resultTry,\n            stats,\n            seconds,\n        } = this.state;\n\n        const practiceList = this.getPracticeList();\n        const totalRamainingNoFastHit = practiceList\n            .map(i => i.count)\n            .reduce(\n                (previousValue, currentValue) => previousValue + currentValue,\n                0,\n            );\n\n        return (\n            <div className=\"factors\">\n                <div className=\"message\">\n                    <span className={messageClassName}>\n                    {message}\n                    </span>\n                </div>\n                <div className=\"operation\">\n                    <form onSubmit={this.onSubmit}>\n                        <div>\n                            {factor1} x {factor2} = <input\n                                type=\"number\"\n                                maxLength={2}\n                                max={100}\n                                min={0}\n                                value={resultTry}\n                                onChange={this.onChange}\n                                ref={(input) => { this.input = input; }}\n                            />\n                            <button type=\"submit\" className=\"hits\">{t('Go')}</button>\n                        </div>\n                        <div className={`timer ${this.getTimerClass(seconds)}`}>\n                            {seconds}s\n                        </div>\n                    </form>\n                </div>\n                <div>\n                    <button className=\"reset\" onClick={this.reset}>{t('Reset')}</button>\n                    <button className=\"skips\" onClick={this.skip}>{t('Next')}</button>\n                    <button className=\"reveals\" onClick={this.reveal}>{t('Reveal')}</button>\n                </div>\n                <Stats stats={stats.temp} type={t('Until reset')} />\n                <Stats stats={stats.global} type={t('Global')} />\n                { practiceList.length > 0 &&\n                <div className=\"practice\">\n                    <div className=\"practice-title\">\n                        {t('To study')} ({this.toComeBack.size} {t('items')})\n                    </div>\n                    <div className=\"practice-title no-fast-hit\">\n                        {t('Total negative points')}: {totalRamainingNoFastHit}\n                    </div>\n                    <div className=\"practice-list\">\n                        {practiceList.map(i => (\n                            <div key={i.key}>\n                                {i.key} {\n                                    this.showPracticeResults &&\n                                    <span>= <span className=\"reveals\">{i.result}</span></span>\n                                } <span className=\"no-fast-hit\">({t('negative points')}: {i.count})</span>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"operation\">\n                        <button className=\"reveals\" onClick={this.revealAll}>{t('Reveal all')}</button>\n                    </div>\n                </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport const Multiplication = compose(\n    withTranslation(),\n)(MultiplicationComponent);","import React from 'react';\nimport i18n from 'i18next';\n\nexport const ChangeLanguage = () => (\n    <span className=\"change-language\">\n        <select\n            value={i18n.language}\n            onChange={(event) => {\n                i18n.changeLanguage(event.target.value);\n            }}\n        >\n            <option value=\"en\">English</option>\n            <option value=\"pt-BR\">Português</option>\n        </select>\n    </span>\n);","import React from 'react';\nimport './App.scss';\nimport {Multiplication} from './multiplication/Multiplication';\nimport {useTranslation} from 'react-i18next';\nimport {ChangeLanguage} from './ChangeLanguage';\n\nfunction App() {\n    const {t} = useTranslation();\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <span className=\"title\">\n                {t('App title')}\n                </span>\n                <span className=\"github-link\">\n                    <a href=\"https://github.com/lucas-issa/learning-multiplication\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <svg className=\"octicon octicon-mark-github v-align-middle\" height=\"32\" viewBox=\"0 0 16 16\"\n                             version=\"1.1\" width=\"32\" aria-hidden=\"true\">\n                            <path\n                                  d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path></svg>\n                    </a>\n                </span>\n            </header>\n            <ChangeLanguage />\n\n            <Multiplication></Multiplication>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './i18next';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}