{"version":3,"sources":["multiplication/Multiplication.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Stats","props","stats","type","hits","hitsLate","hitsTooLate","misses","skips","reveals","className","Multiplication","state","message","messageClassName","factor1","factor2","result","resultTry","temp","global","seconds","timer","secondsLate","secondsTooLate","toComeBack","Map","comeBackControl","count","input","generateToComeBack","incrementToComeBack","key","item","get","set","decrementToComeBack","delete","mesgTimeout","randomFactor","Math","round","random","decideComeBack","size","maxCount","randomFactors","useComeBack","console","log","toComeBackList","values","i","length","comeBackItem","setState","focus","onChange","e","valueTxt","target","value","Number","go","emitMessage","incrementStat","NaN","onSubmit","preventDefault","reset","save","reveal","toString","skip","load","JSON","parse","localStorage","getItem","toComeBackObj","Object","keys","forEach","setItem","stringify","toComeBackToSave","entries","entry","getTimerClass","getPracticeList","map","sort","a","b","comp","localeCompare","showPracticeResults","showPracticeResultsTimer","revealAll","clearTimeout","setTimeout","this","setInterval","clearInterval","wordsCount","split","getTimeToShowMessage","blur","practiceList","totalRamainingNoFastHit","reduce","previousValue","currentValue","maxLength","max","min","ref","onClick","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.25302708.chunk.js","sourcesContent":["import React from 'react';\nimport './Multiplication.scss';\n\ninterface Stats {\n    hits: number;\n    hitsLate: number;\n    hitsTooLate: number;\n    misses: number;\n    skips: number;\n    reveals: number;\n}\n\ninterface StatsProps {\n    stats: Stats,\n    type: string,\n}\n\nconst Stats = (props: StatsProps) => {\n    const {stats, type} = props;\n    const {\n        hits, hitsLate, hitsTooLate, misses, skips, reveals,\n    } = stats;\n    return (\n        <div className=\"stats\">\n            <div className=\"stats-type\">\n                {type}\n            </div>\n            <div>\n              <span className=\"hits stats-item\">\n                  {hits}\n              </span>\n                {hitsLate > 0 &&\n                <span className=\"hits-late stats-item\">\n                        {hitsLate}\n                    </span>\n                }\n                {hitsTooLate > 0 &&\n                <span className=\"hits-too-late stats-item\">\n                        {hitsTooLate}\n                    </span>\n                }\n                {skips > 0 &&\n                <span className=\"skips stats-item\">\n                        {skips}\n                    </span>\n                }\n                {reveals > 0 &&\n                <span className=\"reveals stats-item\">\n                        {reveals}\n                    </span>\n                }\n                {misses > 0 &&\n                <span className=\"misses stats-item\">\n                        {misses}\n                    </span>\n                }\n            </div>\n        </div>\n    );\n};\n\nfunction initStats(): Stats {\n    return {\n        hits: 0,\n        hitsLate: 0,\n        hitsTooLate: 0,\n        misses: 0,\n        skips: 0,\n        reveals: 0,\n    };\n}\n\ninterface ToComeBackType {\n    factor1: number;\n    factor2: number;\n    result: number;\n    count: number;\n}\n\nexport class Multiplication extends React.Component {\n\n    state: {\n        message: string,\n        messageClassName: string,\n\n        factor1: number,\n        factor2: number,\n        result: number,\n        resultTry: string | number,\n\n        stats: {\n            temp: Stats,\n            global: Stats,\n        },\n\n        seconds: number,\n    } = {\n        message: '',\n        messageClassName: '',\n\n        factor1: null,\n        factor2: null,\n        result: null,\n        resultTry: '',\n\n        stats: {\n            temp: initStats(),\n            global: initStats(),\n        },\n\n        seconds: 0,\n    };\n\n    timer;\n\n    secondsLate = 10;\n    secondsTooLate = 18;\n\n    toComeBack: Map<string, ToComeBackType> = new Map();\n\n    comeBackControl = {\n        count: 0,\n    };\n\n    input: HTMLElement;\n\n    componentWillMount() {\n        this.load();\n    }\n\n    componentDidMount() {\n        this.randomFactors();\n\n        this.timer = setInterval(() => {\n            this.setState({ seconds: this.state.seconds + 1 });\n        }, 1000);\n\n        setTimeout(() => {\n            this.input.focus();\n        }, 250);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    generateToComeBack = (factor1: number, factor2: number) => {\n        return `${factor1}x${factor2}`;\n    }\n\n    incrementToComeBack = () => {\n        const {factor1, factor2, result} = this.state;\n        const key = this.generateToComeBack(factor1, factor2);\n        let item = this.toComeBack.get(key);\n        if (!item) {\n            item = {\n                factor1,\n                factor2,\n                result,\n                count: 0,\n            };\n            this.toComeBack.set(key, item);\n        }\n        item.count++;\n    };\n\n    decrementToComeBack = (factor1: number, factor2: number) => {\n        const key = this.generateToComeBack(factor1, factor2);\n        const item = this.toComeBack.get(key);\n        if (item) {\n            item.count--;\n            if (item.count <= 0) {\n                this.toComeBack.delete(key);\n            }\n        }\n    };\n\n    getTimeToShowMessage(message: string | number) {\n        if (typeof message === 'number') {\n           const time = 3000;\n            console.log('number', time);\n            return time;\n        } else {\n            const wordsCount = message.split(' ').length;\n            const charactersCount = message.length;\n            const time = 400 + (charactersCount * 50) + (wordsCount * 200);\n            // console.log(wordsCount, charactersCount, time);\n            return time;\n        }\n    }\n\n    mesgTimeout;\n    emitMessage(message: string, className = '') {\n        if (this.mesgTimeout) {\n            clearTimeout(this.mesgTimeout);\n            this.mesgTimeout = null;\n        }\n        this.setState({ message, messageClassName: className });\n        this.mesgTimeout = setTimeout(() => {\n            this.setState({ message: '', messageClassName: '' });\n        }, this.getTimeToShowMessage(message));\n    }\n\n    randomFactor = () => {\n        return Math.round(Math.random() * 10);\n    }\n\n    decideComeBack = () => {\n        if (this.toComeBack.size === 0) {\n            return false;\n        }\n\n        let maxCount;\n        if (this.toComeBack.size >= 12) {\n            maxCount = 2;\n        } else if (this.toComeBack.size >= 6) {\n            maxCount = 4;\n        } else {\n            maxCount = 6;\n        }\n        return this.comeBackControl.count >= maxCount;\n    }\n\n    randomFactors = () => {\n        this.comeBackControl.count++;\n\n        let useComeBack = false;\n        if (this.decideComeBack()) {\n            console.log(`useComeBack, count: ${this.comeBackControl.count}, size: ${this.toComeBack.size}`);\n            this.comeBackControl.count = 0;\n            useComeBack = true;\n        }\n\n        let factor1;\n        let factor2;\n        let result;\n        const resultTry = '';\n        const seconds = 0;\n\n        if (useComeBack) {\n            // @ts-ignore\n            const toComeBackList = [...this.toComeBack.values()];\n            const i = Math.round(Math.random() * (toComeBackList.length - 1));\n            // console.log('useComeBack', i, toComeBackList);\n            console.log(`useComeBack, i: ${i}`);\n            const comeBackItem = toComeBackList[i];\n            factor1 = comeBackItem.factor1;\n            factor2 = comeBackItem.factor2;\n            result = comeBackItem.result;\n            console.log('useComeBack', this.generateToComeBack(factor1, factor2));\n        } else {\n            factor1 = this.randomFactor();\n            factor2 = this.randomFactor();\n            result = factor1 * factor2;\n        }\n\n        this.setState({\n            factor1,\n            factor2,\n            result,\n            resultTry,\n            seconds,\n        });\n        this.focus();\n    }\n\n    onChange = (e) => {\n        const valueTxt = e.target.value;\n        const value = valueTxt === '' ? '' : Number(valueTxt);\n        this.setState({\n            resultTry: value,\n        });\n    }\n\n    go = () => {\n        const {result, resultTry, seconds} = this.state;\n        if (result === resultTry) {\n            if (seconds >= this.secondsTooLate) {\n                this.emitMessage('Right but slow', 'success-too-late');\n                this.incrementToComeBack();\n                this.incrementStat('hitsTooLate');\n            } else if (seconds >= this.secondsLate) {\n                this.emitMessage('Congratulations! You can be faster!', 'success-late');\n                this.incrementToComeBack();\n                this.incrementStat('hitsLate');\n            } else {\n                this.emitMessage('Congratulations!!!', 'success');\n                const {factor1, factor2} = this.state;\n                this.decrementToComeBack(factor1, factor2);\n                this.incrementStat('hits');\n            }\n            this.randomFactors();\n        } else {\n            if (resultTry === '' || resultTry === Number.NaN) {\n                this.emitMessage('Type a number...', 'failure');\n            } else if (resultTry > 100) {\n                this.emitMessage('Type a number smaller than 100...', 'failure');\n            } else if (resultTry < 0) {\n                this.emitMessage('Type a positive number...', 'failure');\n            } else if (Math.round(resultTry as number) !== resultTry) {\n                this.emitMessage('Type a rounded number...', 'failure');\n            } else {\n                this.emitMessage('Try again...', 'failure');\n                this.incrementToComeBack();\n                this.incrementStat('misses');\n            }\n            this.focus();\n        }\n    }\n\n    incrementStat(type: string) {\n        const temp = {...this.state.stats.temp};\n        const global = {...this.state.stats.global};\n        temp[type] = temp[type] + 1;\n        global[type] = global[type] + 1;\n        this.setState({\n            stats: {\n                temp: temp,\n                global: global,\n            },\n        }, this.save);\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.go();\n    }\n\n    reset = () => {\n        this.randomFactors();\n        this.setState({\n            stats: {\n                temp: initStats(),\n                global: this.state.stats.global,\n            },\n        }, this.save)\n    }\n\n    reveal = () => {\n        this.emitMessage(this.state.result.toString(10));\n        this.incrementToComeBack();\n        this.incrementStat('reveals');\n        this.focus();\n    }\n\n    skip = () => {\n        this.incrementToComeBack();\n        this.randomFactors();\n        this.incrementStat('skips');\n    }\n\n    load = () => {\n        // localStorage.setItem('stats', null);\n        // localStorage.setItem('toComeBack', null);\n        const stats = JSON.parse(localStorage.getItem('stats'));\n        if (stats && stats.global) {\n            this.setState({stats});\n        }\n        const toComeBackObj = JSON.parse(localStorage.getItem('toComeBack'));\n        if (toComeBackObj && toComeBackObj.toComeBack) {\n            Object.keys(toComeBackObj.toComeBack).forEach(key => {\n                this.toComeBack.set(key, toComeBackObj.toComeBack[key]);\n            });\n        }\n        // console.log(this.toComeBack);\n    };\n\n    focus() {\n        // É necessário fazer o blur antes para no celular sempre exibir o teclado.\n        this.input.blur();\n        this.input.focus();\n    }\n\n    save = () => {\n        localStorage.setItem('stats', JSON.stringify(this.state.stats));\n\n        const toComeBackToSave = {};\n        // @ts-ignore\n        for (let entry of this.toComeBack.entries()) {\n            toComeBackToSave[entry[0]] = entry[1];\n        }\n        localStorage.setItem('toComeBack', JSON.stringify({toComeBack: toComeBackToSave}));\n    }\n\n    getTimerClass = (seconds: number) => {\n        if (seconds >= this.secondsTooLate) {\n            return 'timer-critical';\n        } else if (seconds >= this.secondsLate) {\n            return 'timer-warn';\n        } else {\n            return 'timer-ok';\n        }\n    }\n\n    getPracticeList: () => {\n        key: string,\n        result: number,\n        count: number,\n    }[] = () => {\n        // @ts-ignore\n        return [...this.toComeBack.entries()]\n            .map(entry => ({\n                key: entry[0],\n                ...entry[1],\n            }))\n            .sort((a, b) => {\n                let comp = b.count - a.count;\n                if (comp === 0) {\n                    comp = a.key.localeCompare(b.key);\n                }\n                return comp;\n            });\n    }\n\n\n    showPracticeResults = false;\n    showPracticeResultsTimer;\n\n    revealAll = () => {\n        if (this.showPracticeResultsTimer) {\n            clearTimeout(this.showPracticeResultsTimer);\n            this.showPracticeResultsTimer = null;\n        }\n        this.showPracticeResults = true;\n        setTimeout(() => {\n            this.showPracticeResults = false;\n        }, 2500 * this.toComeBack.size);\n    }\n\n    render() {\n        const {\n            message, messageClassName,\n            factor1, factor2, resultTry,\n            stats,\n            seconds,\n        } = this.state;\n\n        const practiceList = this.getPracticeList();\n        const totalRamainingNoFastHit = practiceList\n            .map(i => i.count)\n            .reduce(\n                (previousValue, currentValue) => previousValue + currentValue,\n                0,\n            );\n\n        return (\n            <div className=\"factors\">\n                <div className=\"message\">\n                    <span className={messageClassName}>\n                    {message}\n                    </span>\n                </div>\n                <div className=\"operation\">\n                    <form onSubmit={this.onSubmit}>\n                        <div>\n                            {factor1} x {factor2} = <input\n                                type=\"number\"\n                                maxLength={2}\n                                max={100}\n                                min={0}\n                                value={resultTry}\n                                onChange={this.onChange}\n                                ref={(input) => { this.input = input; }}\n                            />\n                            <button type=\"submit\" className=\"hits\">Go</button>\n                        </div>\n                        <div className={`timer ${this.getTimerClass(seconds)}`}>\n                            {seconds}s\n                        </div>\n                    </form>\n                </div>\n                <div>\n                    <button className=\"reset\" onClick={this.reset}>Reset</button>\n                    <button className=\"skips\" onClick={this.skip}>Next</button>\n                    <button className=\"reveals\" onClick={this.reveal}>Reveal</button>\n                </div>\n                <Stats stats={stats.temp} type=\"Until reset\" />\n                <Stats stats={stats.global} type=\"Global\" />\n                { practiceList.length > 0 &&\n                <div className=\"practice\">\n                    <div className=\"practice-title\">\n                        To study ({this.toComeBack.size} items)\n                    </div>\n                    <div className=\"practice-title no-fast-hit\">\n                        Total negative points: {totalRamainingNoFastHit}\n                    </div>\n                    <div className=\"practice-list\">\n                        {practiceList.map(i => (\n                            <div key={i.key}>\n                                {i.key} {\n                                    this.showPracticeResults &&\n                                    <span>= <span className=\"reveals\">{i.result}</span></span>\n                                } <span className=\"no-fast-hit\">(negative points: {i.count})</span>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"operation\">\n                        <button className=\"reveals\" onClick={this.revealAll}>Reveal all</button>\n                    </div>\n                </div>\n                }\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.scss';\nimport {Multiplication} from './multiplication/Multiplication';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n            Learning multiplication\n        </header>\n\n        <Multiplication></Multiplication>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}