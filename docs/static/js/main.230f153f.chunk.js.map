{"version":3,"sources":["i18next.ts","multiplication/Multiplication.tsx","ChangeLanguage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["i18n","use","LanguageDetector","initReactI18next","init","resources","translation","fallbackLng","interpolation","escapeValue","Stats","props","stats","type","hits","hitsLate","hitsTooLate","misses","skips","reveals","className","MultiplicationComp","state","message","messageClassName","factor1","factor2","result","resultTry","temp","global","seconds","timer","secondsLate","secondsTooLate","toComeBack","Map","comeBackControl","count","input","generateToComeBack","incrementToComeBack","key","item","get","set","decrementToComeBack","delete","mesgTimeout","randomFactor","Math","round","random","decideComeBack","size","maxCount","randomFactors","useComeBack","console","log","toComeBackList","values","i","length","comeBackItem","setState","focus","onChange","e","valueTxt","target","value","Number","go","t","emitMessage","incrementStat","NaN","onSubmit","preventDefault","reset","save","reveal","toString","skip","load","JSON","parse","localStorage","getItem","toComeBackObj","Object","keys","forEach","setItem","stringify","toComeBackToSave","entries","entry","getTimerClass","getPracticeList","map","sort","a","b","comp","localeCompare","showPracticeResults","showPracticeResultsTimer","revealAll","clearTimeout","setTimeout","this","setInterval","clearInterval","wordsCount","split","getTimeToShowMessage","blur","practiceList","totalRamainingNoFastHit","reduce","previousValue","currentValue","maxLength","max","min","ref","onClick","React","Component","Multiplication","withTranslation","ChangeLanguage","language","event","changeLanguage","App","useTranslation","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.230f153f.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport {initReactI18next} from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n\n    .use(LanguageDetector)\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .init({\n        resources: {\n            'en': {\n                translation: {\n                    \"App title\": \"Learning multiplication\",\n                    \"Go\": \"Go\",\n                    \"Reset\": \"Reset\",\n                    \"Next\": \"Next\",\n                    \"Reveal\": \"Reveal\",\n                    \"Reveal all\": \"Reveal all\",\n                    \"Global\": \"Global\",\n                    \"Until reset\": \"Until reset\",\n                    \"Type a number\": \"Type a number\",\n                    \"Try again\": \"Try again\",\n                    \"Congratulations!!!\": \"Congratulations!!!\",\n                    \"Congratulations! You can be faster!\": \"Congratulations! You can be faster!\",\n                    \"Right but slow\": \"Right but slow\",\n                    \"To study\": \"To study\",\n                    \"items\": \"items\",\n                    \"Total negative points\": \"Total negative points\",\n                    \"negative points\": \"negative points\",\n                }\n            },\n            'pt-BR': {\n                translation: {\n                    \"App title\": \"Aprendendo multiplicação\",\n                    \"Go\": \"Go\",\n                    \"Reset\": \"Limpar\",\n                    \"Next\": \"Próximo\",\n                    \"Reveal\": \"Revelar\",\n                    \"Reveal all\": \"Revelar todos\",\n                    \"Global\": \"Global\",\n                    \"Until reset\": \"Até limpar\",\n                    \"Type a number\": \"Digite um número\",\n                    \"Try again\": \"Tente novamente\",\n                    \"Congratulations!!!\": \"Parabéns!!!\",\n                    \"Congratulations! You can be faster!\": \"Parabéns! Você pode ser mais rápido!\",\n                    \"Right but slow\": \"Certo, mas lento\",\n                    \"To study\": \"A estudar\",\n                    \"items\": \"itens\",\n                    \"Total negative points\": \"Total de pontos negativos\",\n                    \"negative points\": \"pontos negativos\",\n                }\n            },\n        },\n        // lng: \"en\",\n        fallbackLng: \"en\",\n\n        interpolation: {\n            escapeValue: false\n        }\n    });\n","import React from 'react';\nimport './Multiplication.scss';\nimport {WithTranslation, withTranslation} from 'react-i18next';\n\ninterface Stats {\n    hits: number;\n    hitsLate: number;\n    hitsTooLate: number;\n    misses: number;\n    skips: number;\n    reveals: number;\n}\n\ninterface StatsProps {\n    stats: Stats,\n    type: string,\n}\n\nconst Stats = (props: StatsProps) => {\n    const {stats, type} = props;\n    const {\n        hits, hitsLate, hitsTooLate, misses, skips, reveals,\n    } = stats;\n    return (\n        <div className=\"stats\">\n            <div className=\"stats-type\">\n                {type}\n            </div>\n            <div>\n              <span className=\"hits stats-item\">\n                  {hits}\n              </span>\n                {hitsLate > 0 &&\n                <span className=\"hits-late stats-item\">\n                        {hitsLate}\n                    </span>\n                }\n                {hitsTooLate > 0 &&\n                <span className=\"hits-too-late stats-item\">\n                        {hitsTooLate}\n                    </span>\n                }\n                {skips > 0 &&\n                <span className=\"skips stats-item\">\n                        {skips}\n                    </span>\n                }\n                {reveals > 0 &&\n                <span className=\"reveals stats-item\">\n                        {reveals}\n                    </span>\n                }\n                {misses > 0 &&\n                <span className=\"misses stats-item\">\n                        {misses}\n                    </span>\n                }\n            </div>\n        </div>\n    );\n};\n\nfunction initStats(): Stats {\n    return {\n        hits: 0,\n        hitsLate: 0,\n        hitsTooLate: 0,\n        misses: 0,\n        skips: 0,\n        reveals: 0,\n    };\n}\n\ninterface ToComeBackType {\n    factor1: number;\n    factor2: number;\n    result: number;\n    count: number;\n}\n\nclass MultiplicationComp extends React.Component<WithTranslation> {\n\n    state: {\n        message: string,\n        messageClassName: string,\n\n        factor1: number,\n        factor2: number,\n        result: number,\n        resultTry: string | number,\n\n        stats: {\n            temp: Stats,\n            global: Stats,\n        },\n\n        seconds: number,\n    } = {\n        message: '',\n        messageClassName: '',\n\n        factor1: null,\n        factor2: null,\n        result: null,\n        resultTry: '',\n\n        stats: {\n            temp: initStats(),\n            global: initStats(),\n        },\n\n        seconds: 0,\n    };\n\n    timer;\n\n    secondsLate = 10;\n    secondsTooLate = 18;\n\n    toComeBack: Map<string, ToComeBackType> = new Map();\n\n    comeBackControl = {\n        count: 0,\n    };\n\n    input: HTMLElement;\n\n    componentDidMount() {\n        this.load();\n\n        this.randomFactors();\n\n        this.timer = setInterval(() => {\n            this.setState({ seconds: this.state.seconds + 1 });\n        }, 1000);\n\n        setTimeout(() => {\n            this.input.focus();\n        }, 250);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    generateToComeBack = (factor1: number, factor2: number) => {\n        return `${factor1}x${factor2}`;\n    }\n\n    incrementToComeBack = () => {\n        const {factor1, factor2, result} = this.state;\n        const key = this.generateToComeBack(factor1, factor2);\n        let item = this.toComeBack.get(key);\n        if (!item) {\n            item = {\n                factor1,\n                factor2,\n                result,\n                count: 0,\n            };\n            this.toComeBack.set(key, item);\n        }\n        item.count++;\n    };\n\n    decrementToComeBack = (factor1: number, factor2: number) => {\n        const key = this.generateToComeBack(factor1, factor2);\n        const item = this.toComeBack.get(key);\n        if (item) {\n            item.count--;\n            if (item.count <= 0) {\n                this.toComeBack.delete(key);\n            }\n        }\n    };\n\n    getTimeToShowMessage(message: string | number) {\n        if (typeof message === 'number') {\n           const time = 3000;\n            console.log('number', time);\n            return time;\n        } else {\n            const wordsCount = message.split(' ').length;\n            const charactersCount = message.length;\n            const time = 400 + (charactersCount * 50) + (wordsCount * 200);\n            // console.log(wordsCount, charactersCount, time);\n            return time;\n        }\n    }\n\n    mesgTimeout;\n    emitMessage(message: string, className = '') {\n        if (this.mesgTimeout) {\n            clearTimeout(this.mesgTimeout);\n            this.mesgTimeout = null;\n        }\n        this.setState({ message, messageClassName: className });\n        this.mesgTimeout = setTimeout(() => {\n            this.setState({ message: '', messageClassName: '' });\n        }, this.getTimeToShowMessage(message));\n    }\n\n    randomFactor = () => {\n        return Math.round(Math.random() * 10);\n    }\n\n    decideComeBack = () => {\n        if (this.toComeBack.size === 0) {\n            return false;\n        }\n\n        let maxCount;\n        if (this.toComeBack.size >= 12) {\n            maxCount = 2;\n        } else if (this.toComeBack.size >= 6) {\n            maxCount = 4;\n        } else {\n            maxCount = 6;\n        }\n        return this.comeBackControl.count >= maxCount;\n    }\n\n    randomFactors = () => {\n        this.comeBackControl.count++;\n\n        let useComeBack = false;\n        if (this.decideComeBack()) {\n            console.log(`useComeBack, count: ${this.comeBackControl.count}, size: ${this.toComeBack.size}`);\n            this.comeBackControl.count = 0;\n            useComeBack = true;\n        }\n\n        let factor1;\n        let factor2;\n        let result;\n        const resultTry = '';\n        const seconds = 0;\n\n        if (useComeBack) {\n            // @ts-ignore\n            const toComeBackList = [...this.toComeBack.values()];\n            const i = Math.round(Math.random() * (toComeBackList.length - 1));\n            // console.log('useComeBack', i, toComeBackList);\n            console.log(`useComeBack, i: ${i}`);\n            const comeBackItem = toComeBackList[i];\n            factor1 = comeBackItem.factor1;\n            factor2 = comeBackItem.factor2;\n            result = comeBackItem.result;\n            console.log('useComeBack', this.generateToComeBack(factor1, factor2));\n        } else {\n            factor1 = this.randomFactor();\n            factor2 = this.randomFactor();\n            result = factor1 * factor2;\n        }\n\n        this.setState({\n            factor1,\n            factor2,\n            result,\n            resultTry,\n            seconds,\n        });\n        this.focus();\n    }\n\n    onChange = (e) => {\n        const valueTxt = e.target.value;\n        const value = valueTxt === '' ? '' : Number(valueTxt);\n        this.setState({\n            resultTry: value,\n        });\n    }\n\n    go = () => {\n        const {t} = this.props;\n        const {result, resultTry, seconds} = this.state;\n        if (result === resultTry) {\n            if (seconds >= this.secondsTooLate) {\n                this.emitMessage(t('Right but slow'), 'success-too-late');\n                this.incrementToComeBack();\n                this.incrementStat('hitsTooLate');\n            } else if (seconds >= this.secondsLate) {\n                this.emitMessage(t('Congratulations! You can be faster!'), 'success-late');\n                this.incrementToComeBack();\n                this.incrementStat('hitsLate');\n            } else {\n                this.emitMessage(t('Congratulations!!!'), 'success');\n                const {factor1, factor2} = this.state;\n                this.decrementToComeBack(factor1, factor2);\n                this.incrementStat('hits');\n            }\n            this.randomFactors();\n        } else {\n            if (resultTry === '' || resultTry === Number.NaN) {\n                this.emitMessage(`${t('Type a number')}...`, 'failure');\n            } else if (resultTry > 100) {\n                this.emitMessage('Type a number smaller than 100...', 'failure');\n            } else if (resultTry < 0) {\n                this.emitMessage('Type a positive number...', 'failure');\n            } else if (Math.round(resultTry as number) !== resultTry) {\n                this.emitMessage('Type a rounded number...', 'failure');\n            } else {\n                this.emitMessage(`${t('Try again')}...`, 'failure');\n                this.incrementToComeBack();\n                this.incrementStat('misses');\n            }\n            this.focus();\n        }\n    }\n\n    incrementStat(type: string) {\n        const temp = {...this.state.stats.temp};\n        const global = {...this.state.stats.global};\n        temp[type] = temp[type] + 1;\n        global[type] = global[type] + 1;\n        this.setState({\n            stats: {\n                temp: temp,\n                global: global,\n            },\n        }, this.save);\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.go();\n    }\n\n    reset = () => {\n        this.randomFactors();\n        this.setState({\n            stats: {\n                temp: initStats(),\n                global: this.state.stats.global,\n            },\n        }, this.save)\n    }\n\n    reveal = () => {\n        this.emitMessage(this.state.result.toString(10));\n        this.incrementToComeBack();\n        this.incrementStat('reveals');\n        this.focus();\n    }\n\n    skip = () => {\n        this.incrementToComeBack();\n        this.randomFactors();\n        this.incrementStat('skips');\n    }\n\n    load = () => {\n        // localStorage.setItem('stats', null);\n        // localStorage.setItem('toComeBack', null);\n        const stats = JSON.parse(localStorage.getItem('stats'));\n        if (stats && stats.global) {\n            this.setState({stats});\n        }\n        const toComeBackObj = JSON.parse(localStorage.getItem('toComeBack'));\n        if (toComeBackObj && toComeBackObj.toComeBack) {\n            Object.keys(toComeBackObj.toComeBack).forEach(key => {\n                this.toComeBack.set(key, toComeBackObj.toComeBack[key]);\n            });\n        }\n        // console.log(this.toComeBack);\n    };\n\n    focus() {\n        // É necessário fazer o blur antes para no celular sempre exibir o teclado.\n        this.input.blur();\n        this.input.focus();\n    }\n\n    save = () => {\n        localStorage.setItem('stats', JSON.stringify(this.state.stats));\n\n        const toComeBackToSave = {};\n        // @ts-ignore\n        for (let entry of this.toComeBack.entries()) {\n            toComeBackToSave[entry[0]] = entry[1];\n        }\n        localStorage.setItem('toComeBack', JSON.stringify({toComeBack: toComeBackToSave}));\n    }\n\n    getTimerClass = (seconds: number) => {\n        if (seconds >= this.secondsTooLate) {\n            return 'timer-critical';\n        } else if (seconds >= this.secondsLate) {\n            return 'timer-warn';\n        } else {\n            return 'timer-ok';\n        }\n    }\n\n    getPracticeList: () => {\n        key: string,\n        result: number,\n        count: number,\n    }[] = () => {\n        // @ts-ignore\n        return [...this.toComeBack.entries()]\n            .map(entry => ({\n                key: entry[0],\n                ...entry[1],\n            }))\n            .sort((a, b) => {\n                let comp = b.count - a.count;\n                if (comp === 0) {\n                    comp = a.key.localeCompare(b.key);\n                }\n                return comp;\n            });\n    }\n\n\n    showPracticeResults = false;\n    showPracticeResultsTimer;\n\n    revealAll = () => {\n        if (this.showPracticeResultsTimer) {\n            clearTimeout(this.showPracticeResultsTimer);\n            this.showPracticeResultsTimer = null;\n        }\n        this.showPracticeResults = true;\n        setTimeout(() => {\n            this.showPracticeResults = false;\n        }, 2500 * this.toComeBack.size);\n    }\n\n    render() {\n        const {t} = this.props;\n        const {\n            message, messageClassName,\n            factor1, factor2, resultTry,\n            stats,\n            seconds,\n        } = this.state;\n\n        const practiceList = this.getPracticeList();\n        const totalRamainingNoFastHit = practiceList\n            .map(i => i.count)\n            .reduce(\n                (previousValue, currentValue) => previousValue + currentValue,\n                0,\n            );\n\n        return (\n            <div className=\"factors\">\n                <div className=\"message\">\n                    <span className={messageClassName}>\n                    {message}\n                    </span>\n                </div>\n                <div className=\"operation\">\n                    <form onSubmit={this.onSubmit}>\n                        <div>\n                            {factor1} x {factor2} = <input\n                                type=\"number\"\n                                maxLength={2}\n                                max={100}\n                                min={0}\n                                value={resultTry}\n                                onChange={this.onChange}\n                                ref={(input) => { this.input = input; }}\n                            />\n                            <button type=\"submit\" className=\"hits\">Go</button>\n                        </div>\n                        <div className={`timer ${this.getTimerClass(seconds)}`}>\n                            {seconds}s\n                        </div>\n                    </form>\n                </div>\n                <div>\n                    <button className=\"reset\" onClick={this.reset}>{t('Reset')}</button>\n                    <button className=\"skips\" onClick={this.skip}>{t('Next')}</button>\n                    <button className=\"reveals\" onClick={this.reveal}>{t('Reveal')}</button>\n                </div>\n                <Stats stats={stats.temp} type={t('Until reset')} />\n                <Stats stats={stats.global} type={t('Global')} />\n                { practiceList.length > 0 &&\n                <div className=\"practice\">\n                    <div className=\"practice-title\">\n                        {t('To study')} ({this.toComeBack.size} {t('items')})\n                    </div>\n                    <div className=\"practice-title no-fast-hit\">\n                        {t('Total negative points')}: {totalRamainingNoFastHit}\n                    </div>\n                    <div className=\"practice-list\">\n                        {practiceList.map(i => (\n                            <div key={i.key}>\n                                {i.key} {\n                                    this.showPracticeResults &&\n                                    <span>= <span className=\"reveals\">{i.result}</span></span>\n                                } <span className=\"no-fast-hit\">({t('negative points')}: {i.count})</span>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"operation\">\n                        <button className=\"reveals\" onClick={this.revealAll}>{t('Reveal all')}</button>\n                    </div>\n                </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport const Multiplication = withTranslation()(MultiplicationComp);","import React from 'react';\nimport i18n from 'i18next';\n\nexport const ChangeLanguage = () => (\n    <span className=\"change-language\">\n        <select\n            value={i18n.language}\n            onChange={(event) => {\n                i18n.changeLanguage(event.target.value);\n            }}\n        >\n            <option value=\"en\">English</option>\n            <option value=\"pt-BR\">Português</option>\n        </select>\n    </span>\n);","import React from 'react';\nimport './App.scss';\nimport {Multiplication} from './multiplication/Multiplication';\nimport {useTranslation} from 'react-i18next';\nimport {ChangeLanguage} from './ChangeLanguage';\n\nfunction App() {\n    const {t} = useTranslation();\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {t('App title')}\n            </header>\n            <ChangeLanguage />\n\n            <Multiplication></Multiplication>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './i18next';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}